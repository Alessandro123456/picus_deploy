-- MySQL Script generated by MySQL Workbench
-- Sun Oct 18 15:27:58 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema monitoringdieti
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `monitoringdieti` ;

-- -----------------------------------------------------
-- Schema monitoringdieti
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `monitoringdieti` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `monitoringdieti` ;

-- -----------------------------------------------------
-- Table `monitoringdieti`.`utente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `monitoringdieti`.`utente` ;

CREATE TABLE IF NOT EXISTS `monitoringdieti`.`utente` (
  `email` VARCHAR(70) NOT NULL,
  `NOME` VARCHAR(30) NULL DEFAULT NULL,
  `telefono` VARCHAR(45) NULL DEFAULT NULL,
  `url_foto` VARCHAR(500) NULL DEFAULT NULL,
  PRIMARY KEY (`email`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE UNIQUE INDEX `email_UNIQUE` ON `monitoringdieti`.`utente` (`email` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `monitoringdieti`.`locale`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `monitoringdieti`.`locale` ;

CREATE TABLE IF NOT EXISTS `monitoringdieti`.`locale` (
  `idLOCALE` VARCHAR(10) NOT NULL,
  `numero_tel` VARCHAR(10) NOT NULL,
  `tipologia` VARCHAR(25) NOT NULL,
  `condiviso` VARCHAR(25) NULL DEFAULT NULL,
  `indirizzo` VARCHAR(45) NOT NULL,
  `superficie` INT NOT NULL,
  `capienza_massima` INT NOT NULL,
  `dipartimento` VARCHAR(45) NOT NULL,
  `responsabile` VARCHAR(70) NOT NULL,
  `stato_locale` VARCHAR(25) NULL DEFAULT NULL,
  PRIMARY KEY (`idLOCALE`),
  CONSTRAINT `responsabile_fk`
    FOREIGN KEY (`responsabile`)
    REFERENCES `monitoringdieti`.`utente` (`email`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE UNIQUE INDEX `idLOCALE_UNIQUE` ON `monitoringdieti`.`locale` (`idLOCALE` ASC) VISIBLE;

CREATE INDEX `responsabile_fk_idx` ON `monitoringdieti`.`locale` (`responsabile` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `monitoringdieti`.`prenotazione`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `monitoringdieti`.`prenotazione` ;

CREATE TABLE IF NOT EXISTS `monitoringdieti`.`prenotazione` (
  `idPRENOTAZIONE` INT NOT NULL AUTO_INCREMENT,
  `data_prenotazione` DATE NOT NULL,
  `data_richiesta` DATE NOT NULL,
  `ora_inizio` TIME NOT NULL,
  `ora_fine` TIME NOT NULL,
  `richiedente` VARCHAR(70) NOT NULL,
  `numero_persone` INT NOT NULL,
  `locale` VARCHAR(10) NOT NULL,
  `descrizione` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idPRENOTAZIONE`),
  CONSTRAINT `locale`
    FOREIGN KEY (`locale`)
    REFERENCES `monitoringdieti`.`locale` (`idLOCALE`),
  CONSTRAINT `richiedente_fk`
    FOREIGN KEY (`richiedente`)
    REFERENCES `monitoringdieti`.`utente` (`email`))
ENGINE = InnoDB
AUTO_INCREMENT = 114
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE UNIQUE INDEX `idPRENOTAZIONE_UNIQUE` ON `monitoringdieti`.`prenotazione` (`idPRENOTAZIONE` ASC) VISIBLE;

CREATE INDEX `locale_idx` ON `monitoringdieti`.`prenotazione` (`locale` ASC) VISIBLE;

CREATE INDEX `richiedente_fk_idx` ON `monitoringdieti`.`prenotazione` (`richiedente` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `monitoringdieti`.`prenotazione_studente`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `monitoringdieti`.`prenotazione_studente` ;

CREATE TABLE IF NOT EXISTS `monitoringdieti`.`prenotazione_studente` (
  `idPRENOTAZIONE_STUDENTE` INT NOT NULL AUTO_INCREMENT,
  `PRENOTAZIONE` INT NOT NULL,
  `data_prenotazione` DATE NOT NULL,
  `data_richiesta` DATE NOT NULL,
  `ora_inizio` TIME NOT NULL,
  `ora_fine` TIME NOT NULL,
  `studente` VARCHAR(30) NOT NULL,
  `locale` VARCHAR(10) NOT NULL,
  `descrizione` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`idPRENOTAZIONE_STUDENTE`),
  CONSTRAINT `PRENOTAZIONE`
    FOREIGN KEY (`PRENOTAZIONE`)
    REFERENCES `monitoringdieti`.`prenotazione` (`idPRENOTAZIONE`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 103
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE UNIQUE INDEX `idPRENOTAZIONE_STUDENTE_UNIQUE` ON `monitoringdieti`.`prenotazione_studente` (`idPRENOTAZIONE_STUDENTE` ASC) VISIBLE;

CREATE UNIQUE INDEX `PRENOTAZIONE_UNIQUE` ON `monitoringdieti`.`prenotazione_studente` (`PRENOTAZIONE` ASC, `studente` ASC) VISIBLE;

CREATE INDEX `idPRENOTAZIONE_idx` ON `monitoringdieti`.`prenotazione_studente` (`PRENOTAZIONE` ASC) VISIBLE;

USE `monitoringdieti`;

DELIMITER $$

USE `monitoringdieti`$$
DROP TRIGGER IF EXISTS `monitoringdieti`.`insert_posti` $$
USE `monitoringdieti`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `monitoringdieti`.`insert_posti`
BEFORE INSERT ON `monitoringdieti`.`prenotazione`
FOR EACH ROW
BEGIN
 if new.locale in (select locale from prenotazione where data_richiesta = new.data_richiesta and ((ora_fine > new.ora_inizio and ora_fine < new.ora_fine) OR (ora_inizio > new.ora_inizio and ora_inizio< new.ora_fine) OR (ora_inizio <= new.ora_inizio and ora_fine >= new.ora_fine)))  then
  signal sqlstate '50000' set message_text = "Non puoi prenotare";  
 end if;
    if new.locale in (select idLOCALE from locale where stato_locale="chiuso") then
  signal sqlstate '60000' set message_text = "Locale chiuso"; 
    end if;

    if new.numero_persone > (SELECT capienza_massima from locale where idLOCALE = new.locale) then
   signal sqlstate '70000' set message_text = "Posti non disponibili nel locale selezionato";
    end if ;

END$$


USE `monitoringdieti`$$
DROP TRIGGER IF EXISTS `monitoringdieti`.`update_posti` $$
USE `monitoringdieti`$$
CREATE
DEFINER=`root`@`%`
TRIGGER `monitoringdieti`.`update_posti`
BEFORE UPDATE ON `monitoringdieti`.`prenotazione`
FOR EACH ROW
BEGIN
	if new.locale != old.locale OR new.data_richiesta != old.data_richiesta OR new.ora_inizio != old.ora_inizio OR new.ora_fine != old.ora_fine  then
	if new.locale in (select locale from prenotazione where data_richiesta = new.data_richiesta and ((ora_fine > new.ora_inizio and ora_fine < new.ora_fine) OR (ora_inizio > new.ora_inizio and ora_inizio< new.ora_fine) OR (ora_inizio <= new.ora_inizio and ora_fine >= new.ora_fine)))  then
		signal sqlstate '50000' set message_text = "Non puoi prenotare";	 
	end if;
    if new.locale in (select idLOCALE from locale where stato_locale="chiuso") then
		signal sqlstate '60000' set message_text = "Locale chiuso";	
    end if;
    end if;
    
    if new.numero_persone != old.numero_persone then
    if new.numero_persone > (SELECT capienza_massima from locale where idLOCALE = new.locale) then
			signal sqlstate '70000' set message_text = "Posti non disponibili nel locale selezionato";
    end if ;
    end if ;
    
END$$


USE `monitoringdieti`$$
DROP TRIGGER IF EXISTS `monitoringdieti`.`aggiornamento_posti` $$
USE `monitoringdieti`$$
CREATE
DEFINER=`root`@`%`
TRIGGER `monitoringdieti`.`aggiornamento_posti`
BEFORE INSERT ON `monitoringdieti`.`prenotazione_studente`
FOR EACH ROW
BEGIN
    DECLARE count INT;
    
    SELECT numero_persone 
    INTO count
    FROM prenotazione where idPRENOTAZIONE=new.prenotazione;
    
    IF count > 0 THEN
        UPDATE monitoringdieti.prenotazione
        SET monitoringdieti.prenotazione.numero_persone = count -1 where idPRENOTAZIONE=new.prenotazione;
	ELSE signal sqlstate '70000' set message_text = "Non ci sono posti";
			
    END IF; 

END$$


USE `monitoringdieti`$$
DROP TRIGGER IF EXISTS `monitoringdieti`.`aggiornamento_posti_delete` $$
USE `monitoringdieti`$$
CREATE
DEFINER=`root`@`%`
TRIGGER `monitoringdieti`.`aggiornamento_posti_delete`
AFTER DELETE ON `monitoringdieti`.`prenotazione_studente`
FOR EACH ROW
BEGIN
    DECLARE count INT;
    
    SELECT numero_persone 
    INTO count
    FROM prenotazione where idPRENOTAZIONE=old.prenotazione;
    
	UPDATE monitoringdieti.prenotazione
	SET monitoringdieti.prenotazione.numero_persone = count + 1 where idPRENOTAZIONE=old.prenotazione;


END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
    
ALTER USER 'root' IDENTIFIED WITH mysql_native_password BY 'password';
flush privileges;
